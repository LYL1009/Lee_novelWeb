<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lee.mapper.HistoryMapper">
    <resultMap id="BaseResultMap" type="com.lee.entity.History">
        <constructor>
            <idArg column="history_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="novel_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="chapter_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="last_read_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="status" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    history_id, user_id, novel_id, chapter_id, last_read_time, status
  </sql>
    <select id="selectByExample" parameterType="com.lee.entity.HistoryExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <!--  List<History> selectHistoriesByUserId(Integer userId);  -->
    <select id="selectHistoriesByUserId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT * FROM history WHERE user_id=#{userId}
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from history
        where history_id = #{historyId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from history
    where history_id = #{historyId,jdbcType=INTEGER}
  </delete>
    <!--  int deleteByNovelId(Integer novelId);  -->
    <delete id="deleteByNovelId" parameterType="java.lang.Integer">
        DELETE FROM history WHERE novel_id=#{novelId}
    </delete>
    <delete id="deleteByExample" parameterType="com.lee.entity.HistoryExample">
        delete from history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.lee.entity.History">
    insert into history (history_id, user_id, novel_id, 
      chapter_id, last_read_time, status
      )
    values (#{historyId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{novelId,jdbcType=INTEGER}, 
      #{chapterId,jdbcType=INTEGER}, #{lastReadTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.lee.entity.History">
        insert into history
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="historyId != null">
                history_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="novelId != null">
                novel_id,
            </if>
            <if test="chapterId != null">
                chapter_id,
            </if>
            <if test="lastReadTime != null">
                last_read_time,
            </if>
            <if test="status != null">
                status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="historyId != null">
                #{historyId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="novelId != null">
                #{novelId,jdbcType=INTEGER},
            </if>
            <if test="chapterId != null">
                #{chapterId,jdbcType=INTEGER},
            </if>
            <if test="lastReadTime != null">
                #{lastReadTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.lee.entity.HistoryExample" resultType="java.lang.Long">
        select count(*) from history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update history
        <set>
            <if test="record.historyId != null">
                history_id = #{record.historyId,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.novelId != null">
                novel_id = #{record.novelId,jdbcType=INTEGER},
            </if>
            <if test="record.chapterId != null">
                chapter_id = #{record.chapterId,jdbcType=INTEGER},
            </if>
            <if test="record.lastReadTime != null">
                last_read_time = #{record.lastReadTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update history
        set history_id = #{record.historyId,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        novel_id = #{record.novelId,jdbcType=INTEGER},
        chapter_id = #{record.chapterId,jdbcType=INTEGER},
        last_read_time = #{record.lastReadTime,jdbcType=TIMESTAMP},
        status = #{record.status,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.lee.entity.History">
        update history
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="novelId != null">
                novel_id = #{novelId,jdbcType=INTEGER},
            </if>
            <if test="chapterId != null">
                chapter_id = #{chapterId,jdbcType=INTEGER},
            </if>
            <if test="lastReadTime != null">
                last_read_time = #{lastReadTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
        </set>
        where history_id = #{historyId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lee.entity.History">
    update history
    set user_id = #{userId,jdbcType=INTEGER},
      novel_id = #{novelId,jdbcType=INTEGER},
      chapter_id = #{chapterId,jdbcType=INTEGER},
      last_read_time = #{lastReadTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER}
    where history_id = #{historyId,jdbcType=INTEGER}
  </update>
</mapper>