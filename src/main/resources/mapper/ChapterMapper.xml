<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lee.mapper.ChapterMapper">
    <resultMap id="BaseResultMap" type="com.lee.entity.Chapter">
        <constructor>
            <idArg column="chapter_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="novel_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="chapter_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="path" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="words" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="sequence_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    chapter_id, novel_id, chapter_name, path, words, update_time, sequence_id
  </sql>
    <!-- List<Chapter> selectChaptersByNovelId(Integer novelId); -->
    <select id="selectChaptersByNovelId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT * FROM chapter WHERE novel_id=#{novelId} ORDER BY sequence_id ASC
    </select>
    <!--  Integer selectNewUpdateChapterIdByNovelId(Integer novelId);  -->
    <select id="selectNewUpdateChapterIdByNovelId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT chapter_id FROM chapter WHERE sequence_id=
        (SELECT MAX(sequence_id) FROM chapter WHERE novel_id=#{novelId}) AND novel_id=#{novelId}
    </select>
    <!--  Integer selectFirstChapterIdByNovelId(Integer novelId);  -->
    <select id="selectFirstChapterIdByNovelId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT chapter_id FROM chapter WHERE sequence_id=
        (SELECT MIN(sequence_id) FROM chapter WHERE novel_id=#{novelId}) AND novel_id=#{novelId}
    </select>
    <!--  Integer selectNovelChapterNumByNovelId(Integer novelId);  -->
    <select id="selectNovelChapterNumByNovelId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM chapter WHERE novel_id=#{novelId}
    </select>
    <!--  Chapter selectChapterByChapterName(String chapterName);  -->
    <select id="selectChapterByChapterName" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT * FROM chapter WHERE chapter_name=#{chapterName}
    </select>
    <select id="selectByExample" parameterType="com.lee.entity.ChapterExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from chapter
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from chapter
        where chapter_id = #{chapterId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from chapter
    where chapter_id = #{chapterId,jdbcType=INTEGER}
  </delete>
    <!--  int deleteByNovelId(Integer novelId);  -->
    <delete id="deleteByNovelId" parameterType="java.lang.Integer">
        DELETE FROM chapter WHERE novel_id=#{novelId}
    </delete>
    <delete id="deleteByExample" parameterType="com.lee.entity.ChapterExample">
        delete from chapter
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.lee.entity.Chapter">
    insert into chapter (chapter_id, novel_id, chapter_name,
      path, words, update_time,
      sequence_id)
    values (#{chapterId,jdbcType=INTEGER}, #{novelId,jdbcType=INTEGER}, #{chapterName,jdbcType=VARCHAR},
      #{path,jdbcType=VARCHAR}, #{words,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP},
      #{sequenceId,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.lee.entity.Chapter">
        insert into chapter
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="chapterId != null">
                chapter_id,
            </if>
            <if test="novelId != null">
                novel_id,
            </if>
            <if test="chapterName != null">
                chapter_name,
            </if>
            <if test="path != null">
                path,
            </if>
            <if test="words != null">
                words,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="sequenceId != null">
                sequence_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="chapterId != null">
                #{chapterId,jdbcType=INTEGER},
            </if>
            <if test="novelId != null">
                #{novelId,jdbcType=INTEGER},
            </if>
            <if test="chapterName != null">
                #{chapterName,jdbcType=VARCHAR},
            </if>
            <if test="path != null">
                #{path,jdbcType=VARCHAR},
            </if>
            <if test="words != null">
                #{words,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="sequenceId != null">
                #{sequenceId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.lee.entity.ChapterExample" resultType="java.lang.Long">
        select count(*) from chapter
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update chapter
        <set>
            <if test="record.chapterId != null">
                chapter_id = #{record.chapterId,jdbcType=INTEGER},
            </if>
            <if test="record.novelId != null">
                novel_id = #{record.novelId,jdbcType=INTEGER},
            </if>
            <if test="record.chapterName != null">
                chapter_name = #{record.chapterName,jdbcType=VARCHAR},
            </if>
            <if test="record.path != null">
                path = #{record.path,jdbcType=VARCHAR},
            </if>
            <if test="record.words != null">
                words = #{record.words,jdbcType=INTEGER},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.sequenceId != null">
                sequence_id = #{record.sequenceId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update chapter
        set chapter_id = #{record.chapterId,jdbcType=INTEGER},
        novel_id = #{record.novelId,jdbcType=INTEGER},
        chapter_name = #{record.chapterName,jdbcType=VARCHAR},
        path = #{record.path,jdbcType=VARCHAR},
        words = #{record.words,jdbcType=INTEGER},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        sequence_id = #{record.sequenceId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.lee.entity.Chapter">
        update chapter
        <set>
            <if test="novelId != null">
                novel_id = #{novelId,jdbcType=INTEGER},
            </if>
            <if test="chapterName != null">
                chapter_name = #{chapterName,jdbcType=VARCHAR},
            </if>
            <if test="path != null">
                path = #{path,jdbcType=VARCHAR},
            </if>
            <if test="words != null">
                words = #{words,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="sequenceId != null">
                sequence_id = #{sequenceId,jdbcType=INTEGER},
            </if>
        </set>
        where chapter_id = #{chapterId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lee.entity.Chapter">
    update chapter
    set novel_id = #{novelId,jdbcType=INTEGER},
      chapter_name = #{chapterName,jdbcType=VARCHAR},
      path = #{path,jdbcType=VARCHAR},
      words = #{words,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      sequence_id = #{sequenceId,jdbcType=INTEGER}
    where chapter_id = #{chapterId,jdbcType=INTEGER}
  </update>
</mapper>